/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 /home/TA/resource/Laboratory/Adam.glb --transform --shadows 
Files: /home/TA/resource/Laboratory/Adam.glb [55.75MB] > Adam-transformed.glb [3.25MB] (94%)
*/

import { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, useKeyboardControls } from '@react-three/drei'
import { RigidBody, CapsuleCollider, vec3, quat, useRapier } from '@react-three/rapier'
import { useFrame } from '@react-three/fiber'
import { useXR } from '@react-three/xr'
import { Quaternion, Vector3 } from 'three'
import { Ray } from '@dimforge/rapier3d-compat'

export function Adam(props) {
  // Setup value
  const vectorMovement = new Vector3()

  // Refs
  const group = useRef()
  const adam = useRef()
  const adamCollider = useRef()
  const vrROtate = useRef(new Quaternion())

  // GLTF
  const { nodes, materials, animations } = useGLTF('models/Adam-transformed.glb')
  const { actions } = useAnimations(animations, group)

  // Keyboard Controls
  const [, getKey] = useKeyboardControls()

  // State
  const [pose, setPose] = useState("Idle")

  // Rapier
  const { world } = useRapier()

  // XR
  const { session, player } = useXR()

  // EFFECT
  // useEffect play animations
  useEffect(() => {
    actions[pose].reset().fadeIn(0.5).play()

    return () => {
      actions[pose]?.fadeOut(0.5)
    }
  }, [pose, actions])

  // Frame
  useFrame((state, delta) => {
    const { forward, backward, left, right, jump } = getKey()
    const adamPos = vec3(adam.current.translation())
    const adamRotate = quat(adam.current.rotation())
    const adamVel = vec3(adam.current.linvel())
    let camRotate = state.camera.quaternion
    const offsetCam = new Vector3(0, 1, -0.2)

    // Set move direction
    vectorMovement.set(right - left, 0, backward - forward).multiplyScalar(5 * delta).normalize()
    vectorMovement.applyQuaternion(adamRotate)

    // Camera movement
    // offsetCam.applyQuaternion(adamRotate)
    // offsetCam.add(adamPos)
    // if (session) {
    //   camRotate = new Quaternion().setFromRotationMatrix(state.camera.matrixWorld)
    //   player.position.copy(offsetCam)
    // } else {
    //   state.camera.position.copy(offsetCam)
    // }

    // Aplly movement
    adam.current.setRotation({ x: adamRotate.x, y: camRotate.y, z: adamRotate.z, w: camRotate.w })
    adam.current.setLinvel({ ...vectorMovement, y: adamVel.y }, true)

    const ray = new Ray({ ...adamPos, y: adamPos.y + 0.1 }, { x: 0, y: -1, z: 0 })
    const hit = world.castRay(ray, 0.5, true, undefined, undefined, undefined, adam.current)
    if (hit && hit.toi <= 0.4 && jump) {
      adam.current.setLinvel({ ...adamVel, y: 2 }, true)
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <RigidBody ref={adam} colliders={false} type="dynamic" position={[0, 2, 0]} mass={70} enabledRotations={[false, true, false]} name='Adam'>
          <CapsuleCollider ref={adamCollider} args={[0.13, 0.075]} friction={0.1} position={[0, 0.2, 0]} />
          <group name="Armature" rotation={[Math.PI / 2, 0, -Math.PI]} scale={0.0025}>
            <primitive object={nodes.mixamorig7Hips} />
          </group>
          <skinnedMesh name="Ch08_Beard" geometry={nodes.Ch08_Beard.geometry} material={materials.Ch08_hair} skeleton={nodes.Ch08_Beard.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Body" geometry={nodes.Ch08_Body.geometry} material={materials.Ch08_body} skeleton={nodes.Ch08_Body.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Eyelashes" geometry={nodes.Ch08_Eyelashes.geometry} material={materials.Ch08_hair} skeleton={nodes.Ch08_Eyelashes.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Hair" geometry={nodes.Ch08_Hair.geometry} material={materials.Ch08_hair} skeleton={nodes.Ch08_Hair.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Hoodie" geometry={nodes.Ch08_Hoodie.geometry} material={materials.Ch08_body1} skeleton={nodes.Ch08_Hoodie.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Pants" geometry={nodes.Ch08_Pants.geometry} material={materials.Ch08_body1} skeleton={nodes.Ch08_Pants.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
          <skinnedMesh name="Ch08_Sneakers" geometry={nodes.Ch08_Sneakers.geometry} material={materials.Ch08_body1} skeleton={nodes.Ch08_Sneakers.skeleton} rotation={[Math.PI / 2, 0, 0]} scale={0.0025} castShadow receiveShadow />
        </RigidBody>
      </group>
    </group>
  )
}

useGLTF.preload('models/Adam-transformed.glb')
