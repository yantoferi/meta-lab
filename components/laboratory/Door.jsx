/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 /home/TA/resource/Door.glb --transform --shadows --keepgroups 
Files: /home/TA/resource/Door.glb [30.91MB] > Door-transformed.glb [2.54MB] (92%)
*/

import { Ray } from '@dimforge/rapier3d-compat'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { RigidBody, euler, quat, useRapier, vec3 } from '@react-three/rapier'
import { useRef } from 'react'
import { Quaternion } from 'three'

export function Door(props) {
  // Refs
  const leftDoor = useRef()
  const rightDoor = useRef()

  const { nodes, materials } = useGLTF('models/Door-transformed.glb')

  // Rapier
  const { world } = useRapier()

  // Frame
  useFrame((state, delta) => {
    const [leftPos, rightPos] = [vec3(leftDoor.current.translation()), vec3(rightDoor.current.translation())]
    const [leftRot, rightRot] = [quat(leftDoor.current.rotation()), quat(rightDoor.current.rotation())]
    leftPos.x += 0.225; rightPos.x -= 0.225;
    const rayIn = new Ray(leftPos, {x: 0, y: 0, z: -1})
    const rayOut = new Ray(rightPos, {x: 0, y: 0, z: 1})
    const entryHit = world.castRay(rayIn, 0.5, true, undefined, undefined, undefined, leftDoor.current)
    const exitHit = world.castRay(rayOut, 0.5, true, undefined, undefined, undefined, rightDoor.current)
    if (entryHit || exitHit) {
      leftRot.slerp(quat().setFromEuler(euler({x: 0, y: Math.PI/2, z: 0}), true), 0.6)
      leftDoor.current.setRotation(leftRot)
      rightRot.slerp(quat().setFromEuler(euler({x: 0, y: Math.PI/2, z: 0}), true), 0.6)
      rightDoor.current.setRotation(rightRot)
    }
  })

  return (
    <group {...props} dispose={null} key={props.key}>
      <group>
        <RigidBody ref={leftDoor} colliders="cuboid" type='fixed' position={[props.location[0] - 0.255, props.location[1], props.location[2]]}>
          <group position-x={0.255}>
            <mesh castShadow receiveShadow geometry={nodes.Cube003.geometry} material={materials['Afromosia Fine Wood']} />
            <mesh castShadow receiveShadow geometry={nodes.Cube003_1.geometry} material={materials.Glass} />
            <mesh castShadow receiveShadow geometry={nodes.Cube003_2.geometry} material={materials.Handle_Metal} />
          </group>
        </RigidBody>
        <RigidBody ref={rightDoor} colliders="cuboid" type='fixed' position={[props.location[0] + 0.255, props.location[1], props.location[2]]} rotation-y={-Math.PI}>
          <group position-x={0.255}>
            <mesh castShadow receiveShadow geometry={nodes.Cube003.geometry} material={materials['Afromosia Fine Wood']} />
            <mesh castShadow receiveShadow geometry={nodes.Cube003_1.geometry} material={materials.Glass} />
            <mesh castShadow receiveShadow geometry={nodes.Cube003_2.geometry} material={materials.Handle_Metal} />
          </group>
        </RigidBody>
      </group>
    </group>
  )
}

useGLTF.preload('models/Door-transformed.glb')
